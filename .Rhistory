map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude) %>%
addPopups(data$longitude, data$latitude, content)
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude, clickOpts(addPopups(addPopups(data$longitude, data$latitude, content))))
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude, clickOpts(addPopups(data$longitude, data$latitude, content)))
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude, clickOpts(
addPopups(content)
)
)
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude) %>%
addPopups(data = data, lat = data$latitude, lng = data$longitude, options = popupOptions(closeButton = TRUE))
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude) %>%
addPopups(data, lat = data$latitude, lng = data$longitude, popupOptions(closeButton = TRUE), content)
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
library(plotly)
library(dplyr)
library(leaflet)
source('scripts/apiQuery.r')
build_map <- function(queryData) {
data <- get_data(queryData)
#View(data)
if(nrow(data) != 0) {
lat <- unlist(lapply(data$latLng, unlist))[seq(1, nrow(data)*2, 2)]
lng <- unlist(lapply(data$latLng, unlist))[seq(2, nrow(data)*2, 2)]
data$latitude = lat
data$longitude = lng
}
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
latlng <- getLatLng(queryData$city, queryData$state)
cityLat <- latlng$lat
cityLng <- latlng$lon
if(nrow(data) != 0) {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(data, lat = data$latitude, lng = data$longitude) %>%
addPopups(data, lat = data$latitude, lng = data$longitude, content)
} else {
map <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
setView(lng = cityLng, lat = cityLat, zoom = 12)
}
return(map)
}
shiny::runApp()
setwd("/Users/amywang/Documents/info498f/info498-final-project/")
library(dplyr)
source('scripts/apiQuery.R')
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 2,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 2)
seattle <- get_data(queryData)
View(seattle)
View(seattle)
library(plotly)
y = price.nightly,
plot_ly(seattle,
x = attr.occupancy,
y = price.nightly,
mode = "markers"
)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 2,
numofbedrooms = 2,
numofbeds = 2)
seattle <- get_data(queryData)
queryData <- list(
city = "Seattle",
state = "WA")
seattle <- get_data(queryData)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 2,
numofbedrooms = 2,
numofbeds = 2)
seattle <- get_data(queryData)
View(seattle)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 2,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 2)
seattle <- get_data(queryData)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 2)
seattle <- get_data(queryData)
View(seattle)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 50,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 2)
data <- get_data(queryData)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 1)
shiny::runApp()
shiny::runApp()
install.packages(leaflet)
install.pacakage("leaflet")
queryData <- list(
city = "Seattle",
state = "WA",
guests = 2,
isinstantbook = TRUE,
maxdistance = 2,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 2,
)
> install.packages("leaflet")
install.packages("leaflet")
shiny::runApp()
install.packages("Hmisc")
shiny::runApp()
queryData <- list(
city = "Seattle",
state = "WA",
guests = 4,
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 1)
data <- get_data(queryData)
View(data)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 1,
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 1)
data <- get_data(queryData)
View(data)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 1,
isinstantbook = TRUE,
maxdistance = 20,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 1)
data <- get_data(queryData)
shiny::runApp()
queryData <- list(
city = "Seattle",
state = "WA",
guests = 1,
provider = "airbnb",
isinstantbook = TRUE,
maxdistance = 10,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 0)
data <- get_data(queryData)
View(data)
queryData <- list(
city = "Seattle",
state = "WA",
guests = 1,
provider = "airbnb",
isinstantbook = TRUE,
maxdistance = 20,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 0)
data <- get_data(queryData)
queryData <- list(
city = "San Fransico",
state = "CA",
guests = 1,
provider = "airbnb",
isinstantbook = TRUE,
maxdistance = 20,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 0)
data <- get_data(queryData)
queryData <- list(
city = "San Francisco",
state = "CA",
guests = 1,
provider = "airbnb",
isinstantbook = TRUE,
maxdistance = 20,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 0)
data <- get_data(queryData)
shiny::runApp()
summary_prop_type <- group_by(data, attr.propType.text) %>%
summarise("Number of listings" = n())
View(summary_prop_type)
queryData <- list(
city = "San Francisco",
state = "CA",
guests = 1,
provider = "airbnb",
isinstantbook = TRUE,
maxdistance = 20,
numofbathrooms = 1,
numofbedrooms = 1,
numofbeds = 0)
data <- get_data(queryData)
summary_prop_type <- group_by(data, attr.propType.text) %>%
summarise("Number of listings" = n())
View(data)
summary_prop_type <- group_by(data, attr.propType.text) %>%
summarise("num_listings" = n())
plot_ly(data,
x = attr.propType.text,
y = num_listings,
mode = "bar"
) %>%
layout(xaxis = list(title = "Property Type"), yaxis = list(title = "Number of Listings"), Title = "Different Types of Properties")
plot_ly(summary_prop_type,
x = attr.propType.text,
y = num_listings,
mode = "bar"
) %>%
layout(xaxis = list(title = "Property Type"), yaxis = list(title = "Number of Listings"), Title = "Different Types of Properties")
plot_ly(summary_prop_type,
x = attr.propType.text,
y = num_listings,
type = "bar"
) %>%
layout(xaxis = list(title = "Property Type"), yaxis = list(title = "Number of Listings"), Title = "Different Types of Properties")
layout(xaxis = list(title = "Property Type"), yaxis = list(title = "Number of Listings"), title = "Different Types of Properties")
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(data)
shiny::runApp()
library(dplyr)
library(plotly)
source('scripts/apiQuery.R')
build_chart2 <- function(queryData) {
data <- get_data(queryData)
summary_room_type <- group_by(data, attr.roomType.text) %>%
summarise("num_listings" = n())
p <- plot_ly(summary_room_type,
x = attr.roomType.text,
y = num_listings,
type = "bar"
) %>%
layout(xaxis = list(title = "Room Type"), yaxis = list(title = "Number of Listings"), title = "Different Types of Rooms")
return(p)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(dplyr)
library(plotly)
source('scripts/apiQuery.R')
build_chart3 <- function(queryData) {
data <- get_data(queryData)
just_propType <- group_by(data, attr.propType.text) %>%
summarise("meanofprice" = mean(price.monthly))
p <- plot_ly(just_propType,
x = attr.propType.text,
y = meanofprice,
type = 'bar') %>%
layout(xaxis = list(title = "Property Type"), yaxis = list(title = "Avg. Price"),
title = "Average Prices for Property Types")
return(p)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
