}
most_hwy_mpg_dplyr('Honda', 1995)
most_hwy_mpg_dplyr <- function(make, year) {
return(select(filter(vehicles, make == make, year == year)))
}
most_hwy_mpg_dplyr('Honda', 1995)
most_hwy_mpg_dplyr <- function(makes, years) {
return(select(filter(vehicles, make == makes, year == years)))
}
most_hwy_mpg_dplyr('Honda', 1995)
return(select(filter(vehicles, make == makes, year == years)), )
filtered <- filter(vehicles, make == makes, year == years))
filtered <- filter(vehicles, make == makes, year == years)
most_hwy_mpg_dplyr <- function(makes, years) {
filtered <- filter(vehicles, make == makes, year == years)
return(select(filtered))
}
most_hwy_mpg_dplyr('Honda', 1995)
most_hwy_mpg_dplyr <- function(makes, years) {
filtered <- filter(vehicles, make == makes, year == years)
return(filtered)
}
most_hwy_mpg_dplyr('Honda', 1995)
most_hwy_mpg_dplyr <- function(user_make, user_year) {
filter_make_year <- filter(vehicles, make == user_make, year == user_year)
filter_hwy_mpg <- filter(filter_make_year, hwy == max(hwy))
return(filter_hwy_mpg)
}
most_hwy_mpg_dplyr('Honda', 1995)
acuras_2015 <- filter(vehicles, make == 'Acura', year == 2015)
best_acuras_2015 <- filter(acuras_2015, hwy == max(hwy))
select(best_acuras_2015, model)
answer <- select(
filter(
filter(
vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
answer
answer2 <- vehicles %>%
filter(make == 'Acura', year == 2015) %>%
filter(hwy = max(hwy)) %>%
select(model)
answer2 <- vehicles %>%
filter(make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
answer2
title: "index"
---
title: "index"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
user_url
github_base <- 'https://api.github.com/users/'
user <- 'INFO-498F'
api_key <- '5b61507b1d8329026771e590ba8da759a7671363'
user_url <- paste0(github_base, user, '?access_token=', api_key)
user_github_data <- fromJSON(user_url)
user_repos_url <- user_github_data$repos_url
repo_data_url <- paste0(user_repos_url, '?access_token=', api_key, '&per_page=100&sort=created&order=desc')
repo_data <- fromJSON(repo_data_url)
repo_data <- flatten(repo_data)
num_repos <- nrow(repo_data)
most_popular <- select(filter(repo_data, forks_count == max(forks_count)), name)
image_base <- 'http://developer.echonest.com/api/v4/artist/images?api_key='
image_url <- paste0(image_base, api_key, '&name=', gsub(' ', '+', band_no_spaces), '&results=1')
image_results <- fromJSON(image_url)
image_to_include <- image_results$response$images$url
user_url
repo_data_url
user_github_data <- fromJSON(user_url)
library(jsonlite)
require(dplyr)
github_base <- 'https://api.github.com/users/'
user <- 'INFO-498F'
api_key <- '5b61507b1d8329026771e590ba8da759a7671363'
user_url <- paste0(github_base, user, '?access_token=', api_key)
user_github_data <- fromJSON(user_url)
user_repos_url <- user_github_data$repos_url
repo_data_url <- paste0(user_repos_url, '?access_token=', api_key, '&per_page=100&sort=created&order=desc')
repo_data <- fromJSON(repo_data_url)
repo_data <- flatten(repo_data)
repo_data_url
image_url <- user_github_data$avatar_url
image_results <- fromJSON(image_url)
image_url <- paste0(user_github_data$avatar_url, '?access_token=', api_key)
image_results <- fromJSON(image_url)
image_url <- user_github_data$avatar_url
image_url <- user_github_data$avatar_url
image_data_url <- paste0(image_url, '?access_token=', api_key)
image_result <- fromJSON(image_data_url)
image_url <- user_github_data$avatar_url
test2 <- paste0(image_url, '?access_token=', api_key)
test1 <- fromJSON(test2)
image_data_url
image_result
image_result <- fromJSON(image_data_url)
image_data_url
image_url
View(repo_data)
mutate(repo_data, createdDate = user_repos_ur$created_at)
mutate(repo_data, createdDate = user_repos_url$created_at)
user_repos_url$created_at
fromJSON(user_repos_url$created_at)
user_url
mutate(repo_data, formattedCreateDate = format(repo_data$created_at, format="%B %d %Y"))
repo_data <- mutate(repo_data, formattedCreateDate = format(repo_data$created_at, format="%B %d %Y"))
repo_data <- mutate(repo_data, formattedCreateDate = as.Date(repo_data$created_at, format="%B %d %Y"))
repo_data <- mutate(repo_data, formattedCreateDate = as.Date(repo_data$created_at, "%m/%d/%Y"))
repo_data <- mutate(repo_data, formattedCreateDate = format(asDate(repo_data$created_at), format="%B %d %Y"))
repo_data <- mutate(repo_data, formattedCreateDate = format(as.Date(repo_data$created_at), format="%B %d %Y"))
help("ISOdatetime")
simplified_data_frame <- select(repo_data, name, html_url, description, size, language, forks_counts, formattedCreateDate)
simplified_data_frame <- select(repo_data, name, html_url, description, size, language, forks_count, formattedCreateDate)
View(simplified_data_frame)
names(simplified_data_frame)
names(simplified_data_frame) <- c('repo_name', 'repo_url', 'description', 'repo_size', 'repo_language', 'num_of_forks', 'date_created')
names(simplified_data_frame) <- c('Repo Name', 'repo_url', 'description', 'repo_size', 'repo_language', 'num_of_forks', 'date_created')
names(simplified_data_frame) <- c('Repoistory Name', 'URL Address', 'Description', 'Size', 'Language', 'Number of Forks', 'Date Created')
kable(simplified_data_frame, html)
require(knitr)
kable(simplified_data_frame, html)
kable(simplified_data_frame, format = html)
kable(simplified_data_frame, format = 'html')
summary_table <- distinct(select(simplified_data_frame, language))
summary_table <- distinct(select(simplified_data_frame, Language))
View(summary_table)
summary_table <- count(simplified_data_frame, Language)
library(jsonlite)
require(dplyr)
require(knitr)
github_base <- 'https://api.github.com/users/'
user <- 'INFO-498F'
api_key <- '5b61507b1d8329026771e590ba8da759a7671363'
user_url <- paste0(github_base, user, '?access_token=', api_key)
user_github_data <- fromJSON(user_url)
user_repos_url <- user_github_data$repos_url
repo_data_url <- paste0(user_repos_url, '?access_token=', api_key, '&per_page=100&sort=created&order=desc')
repo_data <- fromJSON(repo_data_url)
repo_data <- flatten(repo_data)
num_repos <- nrow(repo_data)
most_popular <- select(filter(repo_data, forks_count == max(forks_count)), name)
image_url <- user_github_data$avatar_url
repo_data <- mutate(repo_data, formattedCreateDate = format(as.Date(repo_data$created_at), format="%B %d %Y"))
simplified_data_frame <- select(repo_data, name, html_url, description, size, language, forks_count, formattedCreateDate)
names(simplified_data_frame) <- c('Repoistory Name', 'URL Address', 'Description', 'Size', 'Language', 'Number of Forks', 'Date Created')
kable(simplified_data_frame, format = 'markdown')
summary_table <- count(simplified_data_frame, Language)
summary_table <- mean(simplified_data_frame, Number of Forks)
summary_table <- mean(simplified_data_frame, 'Number of Forks')
names(simplified_data_frame) <- c('Repoistory_Name', 'URL_Address', 'Description', 'Size', 'Language', 'Number_of_Forks', 'Date_Created')
summary_table <- mean(simplified_data_frame, Number_of_Forks)
summary_table <- sumarise(simplified_data_frame, mean(Number_of_Forks))
summary_table <- summarise(simplified_data_frame, mean(Number_of_Forks))
summary_table <- count(simplified_data_frame, Language)
summary_table <- count(simplified_data_frame, Number_of_Forks)
summary_table <- count(simplified_data_frame, Language)
summary_table <- mutate(summary_table, Fork_Count = count(simplified_data_frame, Number_of_Forks))
test <- count(simplified_data_frame, Number_of_Forks)
View(test)
names(summary_table) <- c('Language', 'Number_or_Repos')
summary_table <- mutate(summary_table, Average_Fork_Count = summarise(simplified_data_frame, mean(Number_of_Forks))
)
summary_table <- mutate(summary_table, Average_Fork_Count = summarise(simplified_data_frame, mean(Number_of_Forks)))
summary_table <- group_by(simplified_data_frame, mean(forks))
summary_table <- group_by(simplified_data_frame, mean(Number_of_Forks))
summary_table <- count(simplified_data_frame, Language)
names(summary_table) <- c('Language', 'Number_or_Repos')
summary_table <- groupBy(simplified_data_frame, Language)
summary_table <- group_by(simplified_data_frame, Language)
summary_table <- simplified_data_frame %>%
group_by(language) %>%
summarise(
'Number_of_Repos' = n(),
'Average_Forks' = mean(Number_of_Forks, na.rm = TRUE)
)
summary_table <- simplified_data_frame %>%
group_by(Language) %>%
summarise(
'Number_of_Repos' = n(),
'Average_Forks' = mean(Number_of_Forks, na.rm = TRUE)
)
require(dplyr)
require('plotly')
library('plotly')
install.packages("plotly")
require(plotly)
gdp <- rename(gdp, value = Gross_GDP)
gdp <- rename(gdp, value = 'Gross_GDP')
gdp <- read.csv('http://data.okfn.org/data/core/gdp/r/gdp.csv')
gdp <- rename(gdp, value = 'Gross_GDP')
gdp <- rename(gdp, value = Gross_GDP)
View(gdp)
gdp <- rename(gdp, Value = 'Gross_GDP')
gdp <- rename(gdp, Value = Gross_GDP)
gdp <- rename(gdp, Value = 'Gross_GDP')
gdp <- rename(gdp, Value = Gross_GDP)
rename(gdp, Value = Gross_GDP)
rename(gdp, Value = 'Gross_GDP')
rename(gdp, Gross_GDP = Value)
View(gdp)
gdp <- read.csv('http://data.okfn.org/data/core/gdp/r/gdp.csv')
gdp <- rename(gdp, Gross_GDP = Value)
pop <- read.csv('http://data.okfn.org/data/core/population/r/population.csv')
View(pop)
pop <- rename(pop, Population = Value)
new <- left_join(gdp, pop, by=c("Country.Code", "Year", "Country.Name"), copy=FALSE)
new <- filter(new, Year = 2014)
new <- filter(new, Year == 2014)
View(new)
new <- mutate(new, GDP_Per_Capita = Gross_GDP / Population)
plot_ly(new, z = GDP_Per_Capita, text = Country.Name, locations = Country.Code, type = 'choropleth')
library(plotly)
library(dplyr)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
View(d)
plot_ly(d, x=depth, y=table, mode="markers")
plot_ly(d, x=depth, y=table, mode="markers", color=depth)
plot_ly(d, x=table, y=depth, mode="markers", color=depth)
plot_ly(d, x=table, y=depth, size = price, mode="markers")
layout(title="Diamond Table V. Depth")
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)
plot_ly(d, x = carat, y = price, color = cut, size = carat)
, mode = "markers"
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = size, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = size, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = carat, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = price, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)  %>%
layout(title="Diamond Carat V. Price" )
layout(title="Diamond Table V. Depth")
plot_ly(d, x=table, y=depth, size = price, mode="markers")  %>%
layout(title="Diamond Table V. Depth")
plot_ly(d, x=depth, y=price, size = price, mode="markers")  %>%
layout(title="Diamond Table V. Depth")
table
layout(title="Diamond Table V. Depth")
plot_ly(d, x=table, y=depth, size = price, mode="markers")  %>%
layout(title="Diamond Table V. Depth")
require('dplyr')
a <- list()
a <- list()
b <- 2
a <- b
a$b
a <- c(b, c)
a$b
a$c
number of students <- 2
mac_user <- 4
number_of_students <- 2
mac_user <- 4
a <- c(number_of_students, mac_user)
a$number_of_students
a[number_of_students]
a
a$number_of_students <- 2
a <- list()
number_of_students <- 2
mac_user <- 4
a$number_of_students <- 2
a$number_of_students
shiny::runApp('Desktop/info498f/homework/info498-final-project')
data.is.dataframe
as.data.frame(data)
is.data.frame(data)
data <- as.data.frame(data)
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
get_data(seattle, wa)
library(localgeo)
# Gets the lat/ln of a specified city + state
getLatLng <- function(city_search, state_search) {
p <- geocode(city_search, state_search)
return(p)
}
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
get_data(seattle, wa)
library(localgeo)
install.packages(localgeo)
library(localgeo)
# Gets the lat/ln of a specified city + state
getLatLng <- function(city_search, state_search) {
p <- geocode(city_search, state_search)
return(p)
}
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
get_data(seattle, wa)
library(localgeo)
install.packages(localgeo)
install.packages('localgeo')
install.packages('localgeo', repos="https://github.com/hrbrmstr/localgeo.git")
install.packages('localgeo', repos="https://github.com/hrbrmstr/localgeo")
install.packages('localgeo', repos="https://github.com/hrbrmstr/localgeo")
devtools::install_github("hrbrmstr/localgeo")
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
library(localgeo)
# Gets the lat/ln of a specified city + state
getLatLng <- function(city_search, state_search) {
p <- geocode(city_search, state_search)
return(p)
}
get_data(seattle, wa)
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
return(data$result)
}
get_data('seattle', 'wa')
get_data('Seattle', 'WA')
View(get_data('Seattle', 'WA'))
library(plotly)
library(dplyr)
source('scripts/apiQuery.R')
build_map <- function(queryData) {
data <- get_data(queryData)
}
setwd('Desktop/info498f/homework/info498-final-project/')
library(plotly)
library(dplyr)
source('scripts/apiQuery.R')
build_map <- function(queryData) {
data <- get_data(queryData)
}
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(queryData) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
guests <- queryData$guests
isinstantbook <- queryData$isinstantbook
latlng <- getLatLng(queryData$city, queryData$state)
lat <- latlng$lat
lng <- latlng$lon
maxdistance <- queryData$maxdistance
numofbathrooms <- queryData$numofbathrooms
numofbedrooms <- queryData$numofbedrooms
numofbeds <- queryData$numofbeds
pricemax <- queryData$maxprice[1]
pricemin <- queryData$minprice[2]
resultsperpage <- queryData$resultsperpage
required_parameters <- paste0(
"&guest=", guests,
#"&isinstantbook=", isinstantbook,
"&latitude=", lat,
"&longitude=", lng,
#"&maxdistance=", maxdistance,
#"&numofbathrooms=", numofbathrooms,
#"&numofbedrooms=", numofbedrooms,
#"&numofbeds=", numofbeds,
"&resultsperpage=", resultsperpage)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
return(data$result)
}
library(shiny)
source('scripts/build_map.R')
shinyServer(function(input, output) {
# Create a map via your build_map function
output$plot <- renderPlotly({
queryData <- list(
guests <- input$guests,
isinstantbook <- input$isinstantbook,
maxdistance <- input$maxdistance,
numofbathrooms <- input$numofbathrooms,
numofbedrooms <- input$numofbedrooms,
numofbeds <- input$numofbeds,
pricemax <- input$price[1],
pricemin <- input$price[2],
resultsperpage <- input$resultsperpage
)
build_map(queryData)
})
})
library(shiny)
library(plotly)
# Define UI for application that draws a histogram
shinyUI(
fluidPage(
# Application title
titlePanel("Hello Shiny!"),
fluidRow(
column(3,
wellPanel(
textInput("city", "Enter a city:"),
textInput("state", "Enter a state:"),
actionButton("submit", "Submit")
),
wellPanel(
h3("Filter Results"),
checkboxInput("isinstantbook", label = "Check for Instant Book only", value = TRUE),
numericInput("guests", label = ("Number of Guests:"), value = 1),
sliderInput("numofbathrooms", "Number of Bathrooms:", min = 1, max = 10, value = 1, step = 1),
sliderInput("numofbedrooms", "Number of Bedrooms:", min = 1, max = 10, value = 2, step = 1),
sliderInput("numofbeds", "Number of Beds:", min = 1, max = 10, value = 2, step = 1),
sliderInput("maxdistance", "Search Radius (Km):", min = 0.01, max = 200, value = 10, step = 5),
sliderInput("price", "Price Range:", min = 0, max = 1000, value = c(250, 750)),
selectInput("resultsperpage", label = ("Number of Results:"), choices = list(15, 20, 25, 30, 40, 45, 50), selected = 15)
)
),
column(9,
mainPanel(
plotlyOutput('plot')
)
)
)
)
)
shiny::runApp()
library(ggmap)
library(RgoogleMaps)
library(plotGoogleMaps)
install.packages('plotGoogleMaps')
library(plotGoogleMaps)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
